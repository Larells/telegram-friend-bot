import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv
import openai
from gtts import gTTS
from io import BytesIO
import speech_recognition as sr
from pydub import AudioSegment
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
memory = {}

# –ö–Ω–æ–ø–∫–∏
keyboard = ReplyKeyboardMarkup([["üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏", "üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞"], ["üé§ –°–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º"]], resize_keyboard=True)

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–¥—Ä—É–≥ ü§ñ", reply_markup=keyboard)

def handle_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text
    memory.setdefault(user_id, []).append(text)
    response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[
        {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫."},
        *[{"role": "user", "content": m} for m in memory[user_id][-5:]]
    ])
    answer = response.choices[0].message.content
    update.message.reply_text(answer)

def generate_image(update: Update, context: CallbackContext):
    update.message.reply_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å!")

def handle_voice(update: Update, context: CallbackContext):
    file = update.message.voice.get_file()
    file_path = file.download()
    audio = AudioSegment.from_ogg(file_path)
    wav_path = file_path + ".wav"
    audio.export(wav_path, format="wav")
    r = sr.Recognizer()
    with sr.AudioFile(wav_path) as source:
        audio_data = r.record(source)
        try:
            text = r.recognize_google(audio_data, language="ru-RU")
            update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {text}")
            update.message.text = text
            handle_text(update, context)
        except sr.UnknownValueError:
            update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

def say_with_voice(update: Update, context: CallbackContext):
    tts = gTTS(text="–Ø —Ä–∞–¥ —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä–∏—Ç—å!", lang="ru")
    bio = BytesIO()
    tts.write_to_fp(bio)
    bio.seek(0)
    update.message.reply_voice(voice=bio)

def main():
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex("üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞"), generate_image))
    dp.add_handler(MessageHandler(Filters.regex("üé§ –°–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º"), say_with_voice))
    dp.add_handler(MessageHandler(Filters.voice, handle_voice))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
