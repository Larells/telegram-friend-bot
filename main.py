import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai

BOT_NAME = "–¢–≤–æ–π–î—Ä—É–≥ ü§ñ"

openai.api_key = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö–∞–∫ –¥–µ–ª–∞?"], ["–ü–æ–¥–¥–µ—Ä–∂–∏ –º–µ–Ω—è"], ["–ü–æ—à—É—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}. –Ø —Ä—è–¥–æ–º, –µ—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ ‚ù§Ô∏è", reply_markup=reply_markup
    )

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def respond(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    if "–ø–æ—à—É—Ç–∏" in user_message.lower():
        prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –¥–æ–±—Ä—É—é –∏ –∫–æ—Ä–æ—Ç–∫—É—é —à—É—Ç–∫—É"
    elif "–ø–æ–¥–¥–µ—Ä–∂" in user_message.lower():
        prompt = "–°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ —Ç—ë–ø–ª–æ–µ –∏ –æ–±–æ–¥—Ä—è—é—â–µ–µ, –±—É–¥—Ç–æ —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥"
    elif "–∫–∞–∫ –¥–µ–ª–∞" in user_message.lower():
        prompt = "–°–ø—Ä–æ—Å–∏ —É —á–µ–ª–æ–≤–µ–∫–∞, –∫–∞–∫ —É –Ω–µ–≥–æ –¥–µ–ª–∞, –∏ –ø–æ–∂–µ–ª–∞–π —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ"
    else:
        prompt = f"–¢—ã ‚Äî –¥–æ–±—Ä—ã–π –¥—Ä—É–≥. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response["choices"][0]["message"]["content"]
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, respond))
    print("Bot is polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
